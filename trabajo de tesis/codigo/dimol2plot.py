from matplotlib.colors import LinearSegmentedColormap
import numpy as np
import matplotlib.pyplot as plt
import scienceplots

colors = [(0,0,0),
(0,0,0.0549019607843137),
(0,0,0.0823529411764706),
(0,0,0.109803921568627),
(0,0,0.137254901960784),
(0,0,0.164705882352941),
(0,0,0.192156862745098),
(0,0,0.219607843137255),
(0,0,0.247058823529412),
(0,0,0.274509803921569),
(0,0,0.301960784313725),
(0,0,0.329411764705882),
(0,0,0.356862745098039),
(0,0,0.384313725490196),
(0,0,0.411764705882353),
(0,0,0.43921568627451),
(0,0,0.466666666666667),
(0,0,0.494117647058824),
(0,0,0.517647058823529),
(0,0,0.545098039215686),
(0,0,0.572549019607843),
(0,0,0.6),
(0,0,0.627450980392157),
(0,0,0.654901960784314),
(0,0,0.682352941176471),
(0,0,0.709803921568627),
(0,0,0.737254901960784),
(0,0,0.764705882352941),
(0,0,0.792156862745098),
(0,0,0.819607843137255),
(0,0,0.847058823529412),
(0,0,0.874509803921569),
(0,0,0.901960784313726),
(0,0,0.929411764705882),
(0,0,0.956862745098039),
(0,0,0.984313725490196),
(0,0.0117647058823529,1),
(0,0.0392156862745098,1),
(0,0.0666666666666667,1),
(0,0.0941176470588235,1),
(0,0.12156862745098,1),
(0,0.149019607843137,1),
(0,0.176470588235294,1),
(0,0.203921568627451,1),
(0,0.231372549019608,1),
(0,0.258823529411765,1),
(0,0.286274509803922,1),
(0,0.313725490196078,1),
(0,0.341176470588235,1),
(0,0.368627450980392,1),
(0,0.396078431372549,1),
(0,0.423529411764706,1),
(0,0.450980392156863,1),
(0,0.47843137254902,1),
(0,0.501960784313725,1),
(0,0.529411764705882,1),
(0,0.556862745098039,1),
(0,0.584313725490196,1),
(0,0.611764705882353,1),
(0,0.63921568627451,1),
(0,0.666666666666667,1),
(0,0.694117647058824,1),
(0,0.72156862745098,1),
(0,0.749019607843137,1),
(0,0.776470588235294,1),
(0,0.803921568627451,1),
(0,0.831372549019608,1),
(0,0.858823529411765,1),
(0,0.886274509803922,1),
(0,0.913725490196078,1),
(0,0.941176470588235,1),
(0,0.968627450980392,1),
(0,0.996078431372549,1),
(0,1,0.976470588235294),
(0,1,0.949019607843137),
(0,1,0.92156862745098),
(0,1,0.894117647058824),
(0,1,0.866666666666667),
(0,1,0.83921568627451),
(0,1,0.811764705882353),
(0,1,0.784313725490196),
(0,1,0.756862745098039),
(0,1,0.729411764705882),
(0,1,0.701960784313725),
(0,1,0.674509803921569),
(0,1,0.647058823529412),
(0,1,0.619607843137255),
(0,1,0.592156862745098),
(0,1,0.564705882352941),
(0,1,0.537254901960784),
(0,1,0.509803921568627),
(0,1,0.486274509803922),
(0,1,0.458823529411765),
(0,1,0.431372549019608),
(0,1,0.403921568627451),
(0,1,0.376470588235294),
(0,1,0.349019607843137),
(0,1,0.32156862745098),
(0,1,0.294117647058824),
(0,1,0.266666666666667),
(0,1,0.23921568627451),
(0,1,0.211764705882353),
(0,1,0.184313725490196),
(0,1,0.156862745098039),
(0,1,0.129411764705882),
(0,1,0.101960784313725),
(0,1,0.0745098039215686),
(0,1,0.0470588235294118),
(0,1,0.0196078431372549),
(0.00784313725490196,1,0),
(0.0352941176470588,1,0),
(0.0627450980392157,1,0),
(0.0901960784313725,1,0),
(0.117647058823529,1,0),
(0.145098039215686,1,0),
(0.172549019607843,1,0),
(0.2,1,0),
(0.227450980392157,1,0),
(0.254901960784314,1,0),
(0.282352941176471,1,0),
(0.309803921568627,1,0),
(0.337254901960784,1,0),
(0.364705882352941,1,0),
(0.392156862745098,1,0),
(0.419607843137255,1,0),
(0.447058823529412,1,0),
(0.474509803921569,1,0),
(0.501960784313725,1,0),
(0.525490196078431,1,0),
(0.552941176470588,1,0),
(0.580392156862745,1,0),
(0.607843137254902,1,0),
(0.635294117647059,1,0),
(0.662745098039216,1,0),
(0.690196078431373,1,0),
(0.717647058823529,1,0),
(0.745098039215686,1,0),
(0.772549019607843,1,0),
(0.8,1,0),
(0.827450980392157,1,0),
(0.854901960784314,1,0),
(0.882352941176471,1,0),
(0.909803921568627,1,0),
(0.937254901960784,1,0),
(0.964705882352941,1,0),
(0.992156862745098,1,0),
(1,0.980392156862745,0),
(1,0.952941176470588,0),
(1,0.925490196078431,0),
(1,0.898039215686275,0),
(1,0.870588235294118,0),
(1,0.843137254901961,0),
(1,0.815686274509804,0),
(1,0.788235294117647,0),
(1,0.76078431372549,0),
(1,0.733333333333333,0),
(1,0.705882352941177,0),
(1,0.67843137254902,0),
(1,0.650980392156863,0),
(1,0.623529411764706,0),
(1,0.596078431372549,0),
(1,0.568627450980392,0),
(1,0.541176470588235,0),
(1,0.513725490196078,0),
(1,0.490196078431373,0),
(1,0.462745098039216,0),
(1,0.435294117647059,0),
(1,0.407843137254902,0),
(1,0.380392156862745,0),
(1,0.352941176470588,0),
(1,0.325490196078431,0),
(1,0.298039215686275,0),
(1,0.270588235294118,0),
(1,0.243137254901961,0),
(1,0.215686274509804,0),
(1,0.188235294117647,0),
(1,0.16078431372549,0),
(1,0.133333333333333,0),
(1,0.105882352941176,0),
(1,0.0784313725490196,0),
(1,0.0509803921568627,0),
(1,0.0235294117647059,0),
(1,0,0.00392156862745098),
(1,0,0.0313725490196078),
(1,0,0.0588235294117647),
(1,0,0.0862745098039216),
(1,0,0.113725490196078),
(1,0,0.141176470588235),
(1,0,0.168627450980392),
(1,0,0.196078431372549),
(1,0,0.223529411764706),
(1,0,0.250980392156863),
(1,0,0.27843137254902),
(1,0,0.305882352941176),
(1,0,0.333333333333333),
(1,0,0.36078431372549),
(1,0,0.388235294117647),
(1,0,0.415686274509804),
(1,0,0.443137254901961),
(1,0,0.470588235294118),
(1,0,0.498039215686275),
(1,0,0.52156862745098),
(1,0,0.549019607843137),
(1,0,0.576470588235294),
(1,0,0.603921568627451),
(1,0,0.631372549019608),
(1,0,0.658823529411765),
(1,0,0.686274509803922),
(1,0,0.713725490196078),
(1,0,0.741176470588235),
(1,0,0.768627450980392),
(1,0,0.796078431372549),
(1,0,0.823529411764706),
(1,0,0.850980392156863),
(1,0,0.87843137254902),
(1,0,0.905882352941176),
(1,0,0.933333333333333),
(1,0,0.96078431372549),
(1,0,0.988235294117647),
(1,0.0156862745098039,1),
(1,0.0431372549019608,1),
(1,0.0705882352941176,1),
(1,0.0980392156862745,1),
(1,0.125490196078431,1),
(1,0.152941176470588,1),
(1,0.180392156862745,1),
(1,0.207843137254902,1),
(1,0.235294117647059,1),
(1,0.262745098039216,1),
(1,0.290196078431373,1),
(1,0.317647058823529,1),
(1,0.345098039215686,1),
(1,0.372549019607843,1),
(1,0.4,1),
(1,0.427450980392157,1),
(1,0.454901960784314,1),
(1,0.482352941176471,1),
(1,0.505882352941176,1),
(1,0.533333333333333,1),
(1,0.56078431372549,1),
(1,0.588235294117647,1),
(1,0.615686274509804,1),
(1,0.643137254901961,1),
(1,0.670588235294118,1),
(1,0.698039215686274,1),
(1,0.725490196078431,1),
(1,0.752941176470588,1),
(1,0.780392156862745,1),
(1,0.807843137254902,1),
(1,0.835294117647059,1),
(1,0.862745098039216,1),
(1,0.890196078431372,1),
(1,0.917647058823529,1),
(1,0.945098039215686,1),
(1,0.972549019607843,1),
(1,1,1)]

nodes = np.linspace(0, 1, num=255)
thorlabs = LinearSegmentedColormap.from_list("thorlabs", list(zip(nodes, colors)))

# Define the parameters
Nx = 500
Ny = 500
Lx = 80E-6
Ly = 80E-6

x, dx = np.linspace(-Lx/2, Lx/2, Nx, retstep=True)
y, dy = np.linspace(-Ly/2, Ly/2, Ny, retstep=True)
X, Y = np.meshgrid(x, y, indexing="xy")
n_eigen = 2

n0 = 1.48  # Refractive index of the background
wavelength = 730E-9  # Wavelength of the light
k0 = 2 * np.pi / wavelength  # Wavenumber

distances = np.load("dimol2/distances.npy")*1e6
couplings = np.zeros(len(distances))


eigenvalues_all = [np.load(f'dimol2/eigenvalues_{i}.npy') for i in range(len(distances))]
eigenvalues_all = np.array(eigenvalues_all)

eigenvectors_all = [np.load(f'dimol2/eigenvectors_{i}.npy') for i in range(len(distances))]
eigenvectors_all = np.array(eigenvectors_all)
eigenvectors_all = np.reshape(eigenvectors_all, (len(distances), Nx*Ny, n_eigen))


# for i in range(len(distances)):
#     plt.style.use('science')
#     fig, ax = plt.subplots(1, 1, dpi=400)
#     ax.imshow(np.abs(eigenvectors_all[i, :, -1].reshape(Nx, Ny) )**2, cmap=thorlabs, extent=[x[0], x[-1], y[0], y[-1]], aspect='auto')
#     ax.set_title(f"Distance: {distances[i]:.2f} um"+f"\nEigenvalue: {np.sqrt(eigenvalues_all[i, -1])/k0 - n0:.2e}")
#     ax.set_xlabel(r'$x$ ($\mu$m)')
#     ax.set_ylabel(r'$y$ ($\mu$m)')
#     fig.savefig(f'./dimol2/eigenvectors_{i}_pp.png')
#     plt.close("all")

#     plt.style.use('science')
#     fig, ax = plt.subplots(1, 1, dpi=400)
#     ax.imshow(np.abs(eigenvectors_all[i, :, -2].reshape(Nx, Ny) )**2, cmap=thorlabs, extent=[x[0], x[-1], y[0], y[-1]], aspect='auto')
#     ax.set_title(f"Distance: {distances[i]:.2f} um"+f"\nEigenvalue: {np.sqrt(eigenvalues_all[i, -2])/k0 - n0:.2e}")
#     ax.set_xlabel(r'$x$ ($\mu$m)')
#     ax.set_ylabel(r'$y$ ($\mu$m)')
#     fig.savefig(f'./dimol2/eigenvectors_{i}_pm.png')
#     plt.close("all")


    


kz_minus = (np.sqrt(eigenvalues_all[:, -2]) - k0*n0) * 1e-2
kz_plus = (np.sqrt(eigenvalues_all[:, -1]) - k0*n0) * 1e-2
couplings = np.abs(np.sqrt(eigenvalues_all[:, 0]) - np.sqrt(eigenvalues_all[:, 1])) * 1e-2 / 2


plt.style.use('science')
fig, ax = plt.subplots(1, 1, dpi=600)
ax2 = ax.twinx()

idx = 9

ax.plot(distances[idx:], kz_minus[idx:], 'r', label=r'$k_z^{+-}$')
ax.plot(distances, kz_plus, 'g', label=r'$k_z^{++}$')
ax2.plot(distances[idx:], couplings[idx:], 'k-', label=r'$\Delta k_z / 2$')

ax2.set_ylabel(r'Coupling (cm$^{-1}$)')


ax.ticklabel_format(axis='y', style='sci')
ax.set_xlabel(r'Distance ($\mu$m)')
ax.set_ylabel(r'$k_z - k_0 n_0$ (cm$^{-1}$)')
ax.set_title('Propagation constants vs Distance')
fig.legend(loc=(0.15, 0.20), fontsize=8)

fig.savefig('./dimol2/eigenvalues_vs_angle.png', dpi=600)
plt.close("all")

